{"slider":{"sliderMins":["-0.4289","-0.4033","-1.2612","0.5"],"sliderMaxs":["1.274","1.4917","2.1959","0.9"],"sliders":["2.7721","4.7183","3.9309","10.0"]},"code":"#define TEXTURE_IN_FLOAT\n\/\/#define TEXTURE_OUT_FLOAT\n\n#define DE_RAY pseudoKleinianSlider\n#define DE_COLOR pseudoKleinianSliderColor\n\n\/\/ #define DE kleinian\n\/\/ #define DE deSpace\n\/\/ #define DE apollonian\n\n\/\/#define WITH_SHADOWS\n\/\/#define WITH_SUN\n\/\/#define WITH_AO\n\/\/#define ONLY_AO\n\/\/#define WITH_VIGNETING\n#define WITH_DEPTH_OF_FIELD\n\/\/#define WITH_ISOLINE\n\n#ifdef ONLY_AO\n    #define BACK_COLOR (float3)(.8f, .8f, .8f) \n#else \n    #define BACK_COLOR (float3)(.08f, .16f, .34f) \n\/\/    #define BACK_COLOR (float3)(.8f, .65f, .54f) \n#endif\n\n#define FOCUSBLUR .0025f\n\n#define PRECISION_FACTOR 1e-3\n#define MIN_DIST_RAYMARCHING .01f\n#define MAX_DIST_RAYMARCHING 15.f\n\n#define MIN_DIST_SHADOW 10.f*PRECISION_FACTOR\n#define MAX_DIST_SHADOW 3.f\n#define PRECISION_FACTOR_SHADOW PRECISION_FACTOR\n\n#define MIN_DIST_AO 10.f*PRECISION_FACTOR\n#define MAX_DIST_AO .2f\n#define PRECISION_FACTOR_AO PRECISION_FACTOR\n\n#define LIGHT_VEC normalize((float3)(.2,.7, 1.6) )\n\n#define DIFF 0\n#define REFR 1\n#define SPEC 2\n#define CHECK 3\n\n#define PATH_TRACING_DEPTH 8\n\ntypedef struct Material {\n\tfloat3 emission; \n\tfloat3 colour; \n\tint type;\n} Material;\n\n\nconst sampler_t sampler_linear = CLK_NORMALIZED_COORDS_FALSE |  CLK_ADDRESS_CLAMP_TO_EDGE | CLK_FILTER_LINEAR;\n\n__constant float4 sphLight = (float4)(0.f,0.f,0.f,4.f);\n__constant float3 COLOR_WATER = (float3)(0.3f, 0.13f, 0.08f);\n__constant float3 COLOR_BACK = (float3)(.42f,.46f,.48f);    \n\n__constant int iter = 100;\n__constant float eps = 0.001f, far = 3.f;\n\n\n\ntypedef struct Context {\n    const float4 mins;\n    const float4 maxs;\n} Context;\n\n\ninline float3 reflect(const float3 i, const float3 n){\n  return i - 2.f * n * dot(n,i);\n}\n\n\/\/ -------------------------------------------------------------------\n\ninline float hash1(const float seed) {\n    float fractptr;\n    return fract(sin(seed)*43758.5453123f, &fractptr);\n}\ninline float2 hash2(const float seed) {\n    float2 fractptr;\n    return fract(sin((float2)(seed*43758.5453123f,(seed+.1)*22578.1459123f)), &fractptr);\n}\ninline float3 hash3(const float seed) {\n    float3 fractptr;\n    return fract(sin((float3)(seed,seed+.1f,seed+.2f))*(float3)(43758.5453123f,22578.1459123f,19642.3490423f), &fractptr);\n}\n\nfloat rand(float2 co){\n\tfloat fractptr;\n\treturn fract(sin(dot(co.xy ,(float2)(12.9898f,78.233f))) * 43758.5453f, &fractptr);\n}\n\nfloat3 ortho(float3 v) {\n    \/\/  See : http:\/\/lolengine.net\/blog\/2013\/09\/21\/picking-orthogonal-vector-combing-coconuts\n    return fabs(v.x) > fabs(v.z) ? (float3)(-v.y, v.x, 0.0f)  : (float3)(0.0f, -v.z, v.y);\n}\n\n\nfloat2 rand2n(float2 seed) {\n    float pfract;\n\t\/\/ implementation based on: lumina.sourceforge.net\/Tutorials\/Noise.html\n    return (float2)(fract(sin(dot(seed.xy ,(float2)(12.9898,78.233f))) * 43758.5453f, &pfract),\n\t          fract(cos(dot(seed.xy ,(float2)(4.898,7.23f))) * 23421.631f, &pfract));\n}\n\nfloat3 coneDirection(float3 dir, float extent, float seed) {\n        \/\/ Formula 34 in GI Compendium\n\tdir = normalize(dir);\n\tfloat3 o1 = normalize(ortho(dir));\n\tfloat3 o2 = normalize(cross(dir, o1));\n\tfloat2 r =  rand2n((float2)(seed, seed + 3452.25f));\n\tr.x=r.x*2.*M_PI;\n\tr.y=1.0-r.y*extent;\n\tfloat oneminus = sqrt(1.0-r.y*r.y);\n\treturn cos(r.x)*oneminus*o1+sin(r.x)*oneminus*o2+r.y*dir;\n}\n\n\nfloat3 cosineDirection(float3 nor, float seed) {\n    \/\/ compute basis from normal\n    \/\/ see http:\/\/orbit.dtu.dk\/fedora\/objects\/orbit:113874\/datastreams\/file_75b66578-222e-4c7d-abdf-f7e255100209\/content\n    \/\/ (link provided by nimitz)\n    float3 tc = (float3)( 1.f+nor.z-nor.xy*nor.xy, -nor.x*nor.y)\/(1.0+nor.z);\n    float3 uu = (float3)( tc.x, tc.z, -nor.x );\n    float3 vv = (float3)( tc.z, tc.y, -nor.y );\n    float u = hash1( 78.233f + seed);\n    float v = hash1( 10.873f + seed);\n    float a = 6.283185f * v;\n    return  sqrt(u)*(cos(a)*uu + sin(a)*vv) + sqrt(1.f-u)*nor;\n}\n\ninline float3 randomCosWeightedHemiSphereVector(const float3 n, const float seed) {\n    const float r1 = 2.f*M_PI_F*hash1(seed), r2 = hash1(seed+.1f);\n    const float3 u = normalize(cross(n, (float3)(0.f,1.f,1.f))), v = cross(u,n);\n    return normalize(sqrt(r2)*(cos(r1)*u + sin(r1)*v) + sqrt(1.f-r2)*n);\n}\n\ninline float3 randomSphereDirection(const float seed) {\n    float2 r = 2.f*M_PI_F*hash2(seed);\n    return (float3)(sin(r.x)*(float2)(sin(r.y),cos(r.y)),cos(r.x));\n}\n\ninline float3 randomHemisphereDirection(const float3 n, const float seed) {\n    float2 r = 2.f*M_PI_F*hash2(seed);\n    float3 dr =  (float3)(sin(r.x)*(float2)(sin(r.y),cos(r.y)),cos(r.x));\n    float k = dot(dr,n);\n    return k == 0.f ? n : normalize(k*dr);\n}\n\n\nint box(const float3 ro, const float3 rd, const float3 sz, float* tN, float* tF, float3* n) {\n    const float3 m = 1.f\/rd,  k = fabs(m)*sz,  a = -m*ro-k*.5f, b = a+k;\n    *n = -sign(rd) * step(a.yzx,a.xyz) * step(a.zxy,a.xyz);\n    *tN = max(max(a.x,a.y),a.z);\n    *tF = min(min(b.x,b.y),b.z);\n    return *tN<*tF && *tF>0.f ? 1.f : 0.f;\n}\n\ninline float map(const float a0, const float b0, const float a1, const float b1, const float v) {\n    return mix(a1,b1,(v-a0)\/(b0-a0));\n}\n\n\/\/ -----------------------------------------------------\n\n\n#define R(p, a) p=cos(a)*p+sin(a)*(float2)(p.y, -p.x)\n\n\nfloat pseudoKleinianSlider(float3 p, const Context* ctx) {\/\/knighty's pseudo kleinian\n    float k,r2, scale=1.f, orb = 1.f;\n    for(int i=0;i<8;i++) {\n       \/\/ if(i==rotater)p.xy=p.xy*rmx;\n        p = 2.f*clamp(p, ctx->mins.xyz, ctx->maxs.xyz)-p;\n        r2 = dot(p,p);\n        k = max(ctx->mins.w\/dot(p,p),1.f);\n        p *= k;\n        scale *= k;\n    }\n    float rxy=length(p.xy);\n    return .5f*max(rxy-ctx->maxs.w, \/*fabs*\/(rxy*p.z) \/ length(p))\/scale;\n}\n\nfloat3 pseudoKleinianSliderColor(float3 p, const Context* ctx) {\/\/knighty's pseudo kleinian\n    float k,r2, scale = 1.f, orb = 1.f;\n    for(int i=0;i<8;i++) {\n        p = 2.f*clamp(p, ctx->mins.xyz, ctx->maxs.xyz)-p;\n        r2 = dot(p,p);\n        orb = min(orb, r2);\n        k = max(ctx->mins.w\/r2,1.f);\n        p *= k;\n        scale *= k;\n    }\n    return (float3)(0.f, .25f+sqrt(orb), orb);\n}\n\nfloat3 nSphere( float3 pos, float4 sph ) {\n    return (pos-sph.xyz)\/sph.w;\n}\n\nfloat iSphere( float3 ro, float3 rd, float4 sph ) {\n    float3 oc = ro - sph.xyz;\n    float b = dot(oc, rd);\n    float c = dot(oc, oc) - sph.w * sph.w;\n    float h = b * b - c;\n    if (h < 0.f) return -1.f;\n\n\tfloat s = sqrt(h);\n\tfloat t1 = -b - s;\n\tfloat t2 = -b + s;\n\treturn t1 < 0.0f ? t2 : t1;\n}\n\n\ninline float rayIntersect(const float3 ro, const float3 rd, const Context* ctx, const float precision, const float mind, const float maxd) {\n    float h, t = mind;\n    for(int i=0; i<300; i++ ) {\n        h = DE_RAY(ro+rd*t, ctx);\n        if (h<precision*t || t>maxd) \n            return t;\n        t += h;\n    }\n    return -1.f;\n}\n\nfloat3 trace(const float3 ro, const float3 rd, const Context* ctx ) {\n    const float dLight = iSphere(ro,rd, sphLight);\n    const float d = rayIntersect(ro, rd, ctx, PRECISION_FACTOR, MIN_DIST_RAYMARCHING, MAX_DIST_RAYMARCHING);\nif (dLight>0.f && dLight<d) {\n\treturn (float3)(dLight, 0.f, 0.f);\n}\n    if (d>0.f) {\n        return (float3)(d, DE_COLOR(ro+rd*d, ctx).y, 1.f);\n    }\n    return (float3)(-1.f, 1.f, 0.f);\n}\n\n\n\n\nfloat3 getRay(float3 ro, float3 look, float2 uv){\n    float3 f = normalize(look - ro);\n    float3 r = normalize((float3)(f.z,0.f,-f.x));\n    float3 u = cross (f,r);\n    return normalize(f + uv.x * r + uv.y * u);\n}\n\nfloat3 calcNormal( float3 pos, float t,const Context* ctx ){\n    const float precis = PRECISION_FACTOR * t * 0.57f;\n    const float3 e = (float3)(precis, -precis, 0.f);\n\n    return normalize(e.xyy*DE_RAY(pos + e.xyy, ctx) + \n\t\t     e.yyx*DE_RAY(pos + e.yyx, ctx) + \n\t\t     e.yxy*DE_RAY(pos + e.yxy, ctx) + \n                     e.xxx*DE_RAY(pos + e.xxx, ctx) );\n}\n\n\n\n\n\n\/*\nfloat3 calcNormal(const float3 p, const float t, const Context* ctx){\n    const float eps = PRECISION_FACTOR * t * 0.57f;\n    float3 e = (float3)(eps, 0.f, 0.f);\n    return normalize((float3)(\n\t\tDE_RAY(p+e.xyy,ctx)-DE_RAY(p-e.xyy,ctx),\n\t\tDE_RAY(p+e.yxy,ctx)-DE_RAY(p-e.yxy,ctx),\n\t\tDE_RAY(p+e.yyx,ctx)-DE_RAY(p-e.yyx,ctx)));\n}\n*\/\n\n\n\/\/ Cameras \n#ifndef WITH_DEPTH_OF_FIELD\n\nfloat3 RD(const float3 ro, const float3 ww,  const float3 uu, const float x, const float y, const int2 res, const float fov) {\n    const float3 \n\/\/        ww = normalize(ta - ro),\n\/\/        uu = normalize(cross(ww, (float3)(0.f,0.f,1.f))), \/\/ up\n        vv = normalize(cross(uu,ww));\n\n    const float2 resF = convert_float2(res);\n    const float px = (2.f * (x\/resF.x) - 1.f) * resF.x\/resF.y, \n                py = (2.f * (y\/resF.y) - 1.f);  \n\n    float3 er = normalize( (float3)( px, py, fov) );\n    return normalize( er.x*uu + er.y*vv + er.z*ww );\n    \/\/return normalize( px*uu + py*vv + fov*ww );\n}\n\n#else\n\n\nfloat3 RD_DOF(float3* ro, const float3 ww, const float3 uu, const float x, const float y, const int2 res, const float fov, const float focusDist, const float2 rv2) {\n    const float3\n   \/\/     ww = normalize(ta - *ro),\n   \/\/     uu = normalize(cross(ww, (float3)(0.f,0.f,1.f))), \/\/ up\n        vv = normalize(cross(uu,ww));\n   \n \/\/float2 rv2 = hash2(24.4316544311f*seed);  \n    float2 resF = convert_float2(res);\n    float2 q = ((float2)(x,y))\/resF;\n\n    float2 p = 2.f*q - 1.f;\n    p.x *= resF.x\/resF.y;\n\n    float2 pt = p + rv2\/resF;   \n \n\n    float3 er = normalize( (float3)( pt.xy, fov*2.f ) );\n    float3 rd = er.x*uu + er.y*vv + er.z*ww;\n\n    float3 go = FOCUSBLUR*(float3)(2.f*rv2-1.f, 0.f);\n    float3 gd = normalize( er*focusDist - go );\n\n    *ro += go.x*uu + go.y*vv;\n    rd += gd.x*uu + gd.y*vv;\n    rd = normalize(rd);\n    return rd;\n}\n\n#endif\n\n\n\nfloat3 renderScene( float3 ro, float3 rd, const Context* ctx, float* dist, float iFrame) {\n\n\t\tfloat2 r, rng = hash2(iFrame*(ro.x+ro.y)*rd.y+rd.z);\n\n\t\tfloat3 finalCol = (float3)(0.0f,0.0f,0.0f);\n        float3 fCum = (float3)(1.0f,1.0f,1.0f);\n\n\t\tMaterial obj, obj0;\n\t\tobj0.emission = (float3)(0.0f,0.f,0.0f);\n\t\tobj0.colour = (float3)(1.f,.5f,.5f);\n\t\tobj0.type = SPEC;\n\n\t\tMaterial objLight;\n\t\tobjLight.emission = (float3)(1.0f,1.0f,1.0f)*5.f;\n\t\tobjLight.colour = (float3)(1.f,1.f,1.f)*1.f;\n\t\tobjLight.type = DIFF;\n\n\t\t\/\/float iFrame = 1.f; \/\/ro.x;\n    \n\t\tfor (int depth = 0; depth < PATH_TRACING_DEPTH; depth++)\n        {\n              \/\/  float t = 0.0;                            \/\/ distance to intersection\n               \/\/ int id = 0;                               \/\/ id of intersected object\n             \/\/   Sphere obj;\n\t\t\t\tfloat3 res = trace( ro, rd, ctx);\n\t\t\t\tfloat t = res.x;\n\t\t\t\t\n\t\t\t\tif (depth == 0) *dist = t;\n\t\t\t\t\n\t\t\t\tif (t <= 0.f) {\n\/\/t = MAX_DIST_RAYMARCHING; \n\/\/obj = objLight;\n                    break;\n\t\t\t\t} else {\n\t\t\t\t\tif (res.z<.5f || res.x>10.f) obj = objLight; else\n\t\t\t\t\t{\n\t\t\t\t\t\tobj = obj0;\n\t\t\t\t\t\tobj.colour =  .75f;\/\/ + 1.f*(0.5f + 0.5f*cos( 6.2831f*res.y + (float3)(0.f,1.f,2.f) ));\n\t\t\t\t\t} \n\t\t\t\t}\n\n\n                float3 x = ro + rd * t;\n                float3 n = (res.z<.5f) ? nSphere(x, sphLight) : calcNormal(x, t, ctx);\n           \n\t\t\t\tfloat3 nl = dot(n,rd) < 0.0f ? n : n * -1.f;\n                float3 f = obj.colour;\n\n                float p = max(max(f.x,f.y),f.z);\n\n\t\t\t\trng.x = rand( rng );\n\/\/ ??????? absorbtion ?????\n                if (rng.x < p)\n                    f = f \/ p;\n                else\n                    break; \/\/R.R.\n\/\/ -------------------------------------\n\n                fCum = f * fCum;\n\n\t\t\t\tint type = obj.type;\n\t\t\t\tif (type == SPEC) {\n\t\t\t\t\tif (rand( rng ) > .8f) {\n\t\t\t\t\t\ttype = DIFF;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n                if (type == DIFF) \/\/ Ideal DIFFUSE reflection\n                {\n\t\t\t\t\tfinalCol = finalCol + fCum * obj.emission;\n\t\t\t\t\t\n\t\t\t\t\tro = x;\n\t\t\t\t\trd = cosineDirection(nl, rng.x);\n                  \/*  float r1 = 2.f * M_PI_F * rand( rng ); \n\t\t\t\t\trng.x = sin(r1 - iFrame);\n\t\t\t\t\t\n                    float r2 = rand( rng ); rng.y = sin(r2 + iFrame);\n                    float r2s = sqrt(r2);\n                    float3 w = nl;\n\t\t\t\t\tfloat3 u = normalize(cross( (fabs(w.x) > .1f ? (float3)(0.f, 1.f, 0.f) : (float3)(1.f,1.f,1.f)) , w));\n\t\t\t\t\tfloat3 v = cross(w,u);\n                    float3 d = normalize(u * cos(r1) * r2s + v * sin(r1) * r2s + w * sqrt(1.f - r2));\n                    \n                    ro = x;\n\t\t\t\t\trd = d;\n\t\t\t\t\t*\/\n                    continue;\n                }\n                else if (type == SPEC)            \/\/ Ideal SPECULAR reflection\n\t\t\t\t{\n\t\t\t\t\tfinalCol = finalCol + fCum * obj.emission;\n\t\t\t\t\t\n\t\t\t\t\tro = x;\n\t\t\t\t\t\/\/rd = rd - n * 2.f * dot(n,rd);\n\t\t\t\t\trd = coneDirection(reflect(rd,n), .125f, rng.x);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if (obj.type == REFR) {\n\t\t\t\t\t\/\/ Ideal dielectric REFRACTION\n\t\t\t\t\tfloat3 reflRayRo = x;\n\t\t\t\t\tfloat3 reflRayRd = rd - n * 2.f * dot(n,rd);     \n\t\t\t\t\tbool into = dot(n,nl) > 0.f;                \/\/ Ray from outside going in?\n\n\t\t\t\t\tfloat nc = 1.0;   \/\/ IOR of air\n\t\t\t\t\tfloat nt = 1.5f; \/\/ IOR of solid\n\t\t\t\t\tfloat nnt = into ? nc \/ nt : nt \/ nc;\n\t\t\t\t\tfloat ddn = dot(rd, nl);\n\t\t\t\t\tfloat cos2t = 1.f - nnt * nnt * (1.f - ddn * ddn);\n\n\t\t\t\t\tif (cos2t < 0.f)    \/\/ Total internal reflection\n\t\t\t\t\t{\n\t\t\t\t\t\tfinalCol = finalCol + fCum * obj.emission;\n\t\t\t\t\t\tro = reflRayRo;\n\t\t\t\t\t\trd = reflRayRd;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat3 tdir = normalize(rd * nnt - n * ((into ? 1.0 : -1.0) * (ddn * nnt + sqrt(cos2t))));\n\n\t\t\t\t\tfloat a = nt - nc;\n\t\t\t\t\tfloat b = nt + nc;\n\t\t\t\t\tfloat R0 = a * a \/ (b * b);\n\t\t\t\t\tfloat c = 1.f - (into ? -ddn : dot(tdir,n));\n\t\t\t\t\tfloat Re = R0 + (1.f - R0) * c * c * c * c * c;\n\t\t\t\t\tfloat Tr = 1.f - Re;\n\t\t\t\t\tfloat P = .25f + .5 * Re;\n\t\t\t\t\tfloat RP = Re \/ P;\n\t\t\t\t\tfloat TP = Tr \/ (1.f - P);\n\n\t\t\t\t\trng.y = rand(rng);\n\t\t\t\t\t\n\t\t\t\t\tif( rng.y < P )\n\t\t\t\t\t{\n\t\t\t\t\t\tro = reflRayRo;\n\t\t\t\t\t\trd = reflRayRd;\n\t\t\t\t\t\tfCum = fCum * RP;\n\t\t\t\t\t\tfinalCol = finalCol + fCum * obj.emission;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tro = x;\n\t\t\t\t\t\trd = tdir;\n\t\t\t\t\t\tfCum = fCum * TP;\n\t\t\t\t\t\tfinalCol = finalCol + fCum * obj.emission;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\/\/ we reached something bright, don't spawn any more rays\n\t\t\t\t\tif (length( obj.emission ) > 100.f)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n            }\n\n            return finalCol;\n\t}\n\n__kernel void render(float3 ro, float3 ww, float3 uu, const float4 sliderMins, const float4 sliderMaxs, \n    write_only image2d_t outputImage, const float4 deltaPix, read_only image2d_t demPalette,\n    global write_only float* zBuffer, const float4 camera) {\n    \n    const int x = get_global_id(0);\n    const int y = get_global_id(1);\n    const int2 outSize = get_image_dim(outputImage);\n    \n\n\n    if (x>=outSize.x || y>=outSize.y) return;\n    \n    const float frameId = camera.w;\n\n\tContext ctx = {sliderMins, sliderMaxs};\n    \/\/ create ray with depth of field\n    const float fov = camera.x; \/\/ 3.f;\n       \t\n   \/\/ ro.y -= 40.f;\t\n  \/\/  ta.y -= 3.f;\n\n    float2 res = convert_float2(outSize);\n    const float2 q = ((float2)(x,y)+deltaPix.xy)\/res;\n\n#ifdef WITH_DEPTH_OF_FIELD\n    float FOCUSDISTANCE = camera.y; \/\/.05f;\/\/length(ro-ta)*.75f;\n    const float3 rd = RD_DOF(&ro, ww, uu, (float)(x)+deltaPix.x, (float)(y)+deltaPix.y, outSize, fov, FOCUSDISTANCE, deltaPix.zw); \n#else\n    const float3 rd = RD(ro, ww, uu, (float)(x)+deltaPix.x, (float)(y)+deltaPix.y, outSize, fov);\n#endif\t\n\n    const float3 cback = (float3)(.1f*(1.f-length(q-.5f)));\n    float dist = 0.f;\n    float3 col = renderScene(ro, rd, &ctx, &dist, frameId);\n\n#ifdef WITH_VIGNETING\n    col *= pow(16.f*q.x*q.y*(1.f-q.x)*(1.f-q.y), .3f); \/\/ vigneting\n#endif\n\n    float4 out = (float4)(clamp(col,(float3)(0.f), (float3)(1.f)),1.f);\n\n#ifdef TEXTURE_OUT_FLOAT\n    write_imagef(outputImage, (int2)(x, y), out); \n#else\n    uint4 rgba = (uint4)((int)(out.z*256.f),\n                         (int)(out.y*256.f),\n                         (int)(out.x*256.f), 256);\n    write_imageui(outputImage, (int2)(x, y), rgba); \n#endif\n    zBuffer[x+y*outSize.x] = dist;\n}\n\n\n\/\/__kernel void dummy(const float3 roo) {\n\/\/    \n\/\/}\n\n\n","camera":{"aperture":0.0,"focal":3.0,"pos":["-7.761761891857758","3.115042614373791","3.3187199100842726"],"focdist":1.0821994543075562,"width":1920,"up":["0.5252952103007231","-0.8452153796392688","0.09836617333395464"],"look":["0.7023297141407623","0.49592539920653533","0.5106769732979878"],"height":1138}}