/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ThicknessSelector.java
 *
 * Created on 26 oct. 2011, 14:37:29
 */
package fractalcl.styles;

import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.beans.PropertyChangeListener;

/**
 *
 * @author sebastien.durand
 */
public abstract class SelectorPanel<Type> extends javax.swing.JPanel implements MouseListener, MouseMotionListener, ComponentListener {

    public static final String SELECTION_CHANGE_PROPERTY = "SELECTION_CHANGED";
    /** L'element survol√© par la souris **/
    protected int overId = -1;
    protected boolean over = false;

    /** Creates new form Selector */
    public SelectorPanel() {
        addMouseMotionListener(this);
        addMouseListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        over = true;
    }

    @Override
    public void mouseExited(MouseEvent e) {
        over = false;
        repaint();
    }

    @Override
    public void mouseDragged(MouseEvent e) {
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        if (over) {
            overId = getIdOnPoint(e.getX(), e.getY());
            repaint();
        }
    }

    @Override
    public void componentResized(ComponentEvent e) {
        repaint();
    }

    @Override
    public void componentMoved(ComponentEvent e) {
    }

    @Override
    public void componentShown(ComponentEvent e) {
        repaint();
    }

    @Override
    public void componentHidden(ComponentEvent e) {
    }

    public void addListener(PropertyChangeListener listener) {
        addPropertyChangeListener(SELECTION_CHANGE_PROPERTY, listener);
    }

    public void removeListeners() {
        removeAll();
    //    ListenersCleaner.cleanListeners(this);
    }

    protected abstract int getIdOnPoint(int x, int y);

    abstract public Type getSelectedValue();

    abstract public void setSelectedValue(Type value);
}
