/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fractalcl.styles;

/**
 *
 * @author sebastien.durand
 */


import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.event.MouseEvent;
import java.awt.geom.GeneralPath;
import java.util.Arrays;

/**
 *
 * @author sebastien.durand
 */
public class StrokeSelector extends SelectorPanel<Stroke> {
    
    private static final Stroke strokeSelection = new BasicStroke(2f);
    
    /** la liste des epaisseur de trais possible **/
    private Stroke[] tab; // = {1,2,3,4};
    /** l'epaisseur courante **/ 
    private Stroke current; // = 1;

    
    /** Creates new form ThicknessSelector */
    public StrokeSelector() {
        super();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>                        
    // Variables declaration - do not modify                     
    // End of variables declaration                   

    public void setAvailableStroke(Stroke[] tabStroke, Stroke selectedStroke) {
        tab = tabStroke;
        current = selectedStroke;
        repaint();
    }
    
    @Override
    public void setSelectedValue(Stroke selectedStroke) {
        current = selectedStroke;
        repaint();
    }

    public void selectedValueFromLineWidth(float lineWidth) {
        for (Stroke s : tab) {
            if (((BasicStroke)s).getLineWidth() == lineWidth) {
                setSelectedValue(s);
                break;
            }
        }
    }
    
    public void selectedValueFromDashArray(float[] dashArray) {
        for (Stroke s : tab) {
            float[] array = ((BasicStroke)s).getDashArray();
            if (array != null && Arrays.equals(array, dashArray)) {
                setSelectedValue(s);
                break;
            }
        }
    }

    @Override
    public Stroke getSelectedValue() {
        return current;
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        Graphics2D g2 = (Graphics2D)g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
               
        int w = getWidth();
        int h = getHeight();
        
        g2.setColor(getBackground());
        g2.fillRect(0, 0, w, h);
        
        Stroke stroke;
        int pas = h / tab.length; 
        
        GeneralPath path;
        w = w-8;
        for (int i=0, s=tab.length; i<s; i++) {
            stroke = tab[i];
            
            path = new GeneralPath();
            path.moveTo(4, i*pas + pas/2);
            path.curveTo(w/3, i*pas, (2*w)/3, (i+1)*pas, w, i*pas + pas/2);
            
            Shape shape = stroke.createStrokedShape(path);
            
            // background
            if ((over) && (i == overId)) { 
                g2.setColor(Color.gray);
                g2.setStroke(strokeSelection);
                g2.draw(shape);
            } 

            // trais
            if (stroke == current) { 
                g2.setColor(Color.cyan);
                g2.setStroke(stroke);
                g2.draw(path);
            } 
            
            g2.setColor(getForeground());
            g2.setStroke(stroke);
            g2.draw(path);
        }
    }
    
    @Override
    public void mouseClicked(MouseEvent e) {
        if (this.isEnabled()) {
            int selection = getIdOnPoint(e.getX(), e.getY());
            current = tab[selection];
            repaint();
            firePropertyChange(SELECTION_CHANGE_PROPERTY, null, current);
        }
    }

    @Override
    protected int getIdOnPoint(int x, int y) {
        return (y * tab.length / getHeight());
    }

}
