/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fractalcl.editor;

import java.awt.Color;
import java.awt.Font;
import java.util.HashMap;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.SimpleAttributeSet;

/**
 *
 * @author durands
 */
public class OpenCLDoc extends MultiSyntaxDocument {

    final static String[] keywords = {
        "abstract",
        "__kernel",
        "__constant",
        "boolean",
        "break",
        "byte",
        "byvalue",
        "case",
        "cast",
        "catch",
        "char",
        "class",
        "const",
        "continue",
        "default",
        "do",
        "double",
        "else",
        "extends",
        "false",
        "final",
        "finally",
        "float",
        "float2",
        "float3",
        "float4",
        "for",
        "future",
        "generic",
        "goto",
        "if",
        "implements",
        "import",
        "image2d_t",
        "image3d_t",
        "inner",
        "inline",
        "instanceof",
        "int",
        "int2",
        "int3",
        "int4",
        "interface",
        "long",
        "native",
        "new",
        "null",
        "operator",
        "outer",
        "package",
        "private",
        "protected",
        "public",
        "rest",
        "return",
        "__read_only",
        "read_only",
        "write_only",
        "__write_only",
        "write_only",
        "__read_write",
        "read_write",
        "global",
        "sampler_t",
        "short",
        "static",
        "super",
        "switch",
        "synchronized",
        "this",
        "throw",
        "throws",
        "transient",
        "true",
        "try",
        "var",
        "void",
        "volatile",
        "while"};
    final static String[] instructions = {
        "abs",
        "abs_diff",
        "acos",
        "acosh",
        "acospi",
        "add_sat",
        "all",
        "any",
        "as_typen",
        "asin",
        "asinh",
        "asinpi",
        "atan",
        "atan2",
        "atan2pi",
        "atanh",
        "atanpi",
        "atomic_and", "atomic_or", "atomic_xor", "atomic_add", "atomic_sub", "atomic_xchg", "atomic_inc", "atomic_dec", "atomic_cmpxchg", "atomic_min", "atomic_max",
        "cbrt",
        "ceil",
        "char",
        "charn",
        "clamp",
        "clBuildProgram",
        "cl_char",
        "cl_charn",
        "clCreateBuffer",
        "clCreateCommandQueue",
        "clCreateContext",
        "clCreateContextFromType",
        "clCreateEventFromGLsyncKHR",
        "clCreateFromD3D10BufferKHR",
        "clCreateFromD3D10Texture2DKHR",
        "clCreateFromD3D10Texture3DKHR",
        "clCreateFromGLBuffer",
        "clCreateFromGLRenderbuffer",
        "clCreateFromGLTexture2D",
        "clCreateFromGLTexture3D",
        "clCreateImage2D",
        "clCreateImage3D",
        "clCreateKernel",
        "clCreateKernelsInProgram",
        "clCreateProgramWithBinary",
        "clCreateProgramWithSource",
        "clCreateSampler",
        "clCreateSubBuffer",
        "clCreateUserEvent",
        "clEnqueueAcquireD3D10ObjectsKHR",
        "clEnqueueAcquireGLObjects",
        "clEnqueueBarrier",
        "clEnqueueCopyBuffer",
        "clEnqueueCopyBufferRect",
        "clEnqueueCopyBufferToImage",
        "clEnqueueCopyImage",
        "clEnqueueCopyImageToBuffer",
        "clEnqueueMapBuffer",
        "clEnqueueMapImage",
        "clEnqueueMarker",
        "clEnqueueNativeKernel",
        "clEnqueueNDRangeKernel",
        "clEnqueueReadBuffer",
        "clEnqueueReadBufferRect",
        "clEnqueueReadImage",
        "clEnqueueReleaseD3D10ObjectsKHR",
        "clEnqueueReleaseGLObjects",
        "clEnqueueTask",
        "clEnqueueUnmapMemObject",
        "clEnqueueWaitForEvents",
        "clEnqueueWriteBuffer",
        "clEnqueueWriteBufferRect",
        "clEnqueueWriteImage",
        "clFinish",
        "clFlush",
        "clGetCommandQueueInfo",
        "clGetContextInfo",
        "clGetGLContextInfoKHR",
        "clGetDeviceIDs",
        "clGetDeviceIDsFromD3D10KHR",
        "clGetDeviceInfo",
        "clGetEventInfo",
        "clGetEventProfilingInfo",
        "clGetExtensionFunctionAddress",
        "clGetGLContextInfoKHR",
        "clGetGLObjectInfo",
        "clGetGLTextureInfo",
        "clGetImageInfo",
        "clGetKernelInfo",
        "clGetKernelWorkGroupInfo",
        "clGetMemObjectInfo",
        "clGetPlatformIDs",
        "clGetPlatformInfo",
        "clGetProgramBuildInfo",
        "clGetProgramInfo",
        "clGetSamplerInfo",
        "clGetSupportedImageFormats",
        "clReleaseCommandQueue",
        "clReleaseContext",
        "clReleaseEvent",
        "clReleaseKernel",
        "clReleaseMemObject",
        "clReleaseProgram",
        "clReleaseSampler",
        "clRetainCommandQueue",
        "clRetainContext",
        "clRetainEvent",
        "clRetainKernel",
        "clRetainMemObject",
        "clRetainProgram",
        "clRetainSampler",
        "clSetCommandQueueProperty",
        "clSetEventCallback",
        "clSetKernelArg",
        "clSetMemObjectDestructorCallback",
        "clSetUserEventStatus",
        "clUnloadCompiler",
        "clWaitForEvents",
        "clz",
        "constant",
        "convert",
        "convert_int2",
        "convert_int3",
        "convert_float2",
        "convert_float3",
        "copysign",
        "cos",
        "cosh",
        "cospi",
        "cross",
        "degrees",
        "distance",
        "dot",
        "erf",
        "erfc",
        "event_t",
        "exp",
        "exp10",
        "exp2",
        "fabs",
        "fast_distance",
        "fast_length",
        "fast_normalize",
        "fdim",
        "floor",
        "fma",
        "fmax",
        "fmin",
        "fmod",
        "fract",
        "frexp",
        "get_global_id",
        "get_global_size",
        "get_global_offset",
        "get_group_id",
        "get_image_channel_data_type",
        "get_image_channel_order",
        "get_image_depth",
        "get_image_dim",
        "get_image_height",
        "get_image_width",
        "get_local_id",
        "get_local_size",
        "get_num_groups",
        "get_work_dim",
        "hadd",
        "half",
        "halfn",
        "halfnxm",
        "half_cos",
        "half_divide",
        "half_exp",
        "half_exp2",
        "half_exp10",
        "half_log",
        "half_log10",
        "half_log2",
        "half_powr",
        "half_recip",
        "half_rsqrt",
        "half_sin",
        "half_sqrt",
        "half_tan",
        "hypot",
        "ilogb",
        "isequal",
        "isfinite",
        "isgreater",
        "isgreaterequal",
        "isinf",
        "isless",
        "islessequal",
        "islessgreater",
        "isnan",
        "isnormal",
        "isnotequal",
        "isordered",
        "isunordered",
        "ldexp",
        "length",
        "lgamma",
        "lgamma_r",
        "log",
        "log10",
        "log1p",
        "log2",
        "logb",
        "mad",
        "mad_hi",
        "mad_sat",
        "mad24",
        "max",
        "maxmag",
        "minmag",
        "mem_fence",
        "min",
        "mix",
        "modf",
        "mul_hi",
        "mul24",
        "nan",
        "native_cos",
        "native_divide",
        "native_exp",
        "native_exp2",
        "native_exp10",
        "native_log",
        "native_log2",
        "native_log10",
        "native_powr",
        "native_recip",
        "native_rsqrt",
        "native_sin",
        "native_sqrt",
        "native_tan",
        "nextafter",
        "normalize",
        "pow",
        "pown",
        "powr",
        "prefetch",
        "radians",
        "read_imagef",
        "read_imageh",
        "read_imagei",
        "read_mem_fence",
        "remainder",
        "remquo",
        "rhadd",
        "rint",
        "rootn",
        "rotate",
        "round",
        "rsqrt",
        "select",
        "short",
        "shortn",
        "shuffle",
        "shuffle2",
        "sign",
        "signbit",
        "sin",
        "sincos",
        "sinh",
        "sinpi",
        "size_t",
        "sqrt",
        "step",
        "smoothstep",
        "sub_sat",
        "tan",
        "tanh",
        "tanpi",
        "tgamma",
        "trunc",
        "vec_step",
        "vload_half",
        "vload_halfn",
        "vloada_halfn",
        "vloadn",
        //"void",
        "vstore_half",
        "vstore_halfn",
        "vstorea_halfn",
        "vstoren",
        "wait_group_events",
        "write_imagef",
        "write_imagei",
        "write_imageui"
    };
    
    final static MutableAttributeSet attr = MultiSyntaxDocument.DEFAULT_KEYWORD;
    final static SimpleAttributeSet operatorTest = new SimpleAttributeSet();
    final static HashMap<String, MutableAttributeSet> allKeywords = new HashMap<String, MutableAttributeSet>();

    static {
        for (String key : keywords) {
            allKeywords.put(key, attr);
        }
        for (String key : instructions) {
            allKeywords.put(key, operatorTest);
        }
    }

    public OpenCLDoc() {
        super(allKeywords);
        setAttributeColor(operatorTest, new Color(16, 64, 16));
        setAttributeFont(operatorTest, new Font("Courier New", Font.ITALIC, 11));
    }
}
